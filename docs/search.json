[
  {
    "objectID": "comments_stat.html",
    "href": "comments_stat.html",
    "title": "댓글 사용자",
    "section": "",
    "text": "library(readr)\n\ncomments_vb_tbl &lt;-  \n  read_csv(\"data/comments_vb_tbl.csv\")\n\nRows: 1 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): 댓글 사용자수, 댓글수, 비디오수\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n## 댓글 통계 요약\ncomments_stat_tbl &lt;- read_csv(\"data/comments_stat_summary.csv\")\n\nRows: 108130 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): authorDisplayName\ndbl (4): 동영상수, 좋아요수, 댓글수, 답글수\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nlist(\n  icon = \"hospital\",\n  color = \"yellow\",\n  value = scales::comma(comments_vb_tbl$`댓글 사용자수`)\n)\n\n$icon\n[1] \"hospital\"\n\n$color\n[1] \"yellow\"\n\n$value\n[1] \"292,828\"\n\n\n\nlist(\n  icon = \"moon-fill\",\n  color = \"danger\",\n  value = scales::comma(comments_vb_tbl$`댓글수`)\n)\n\n$icon\n[1] \"moon-fill\"\n\n$color\n[1] \"danger\"\n\n$value\n[1] \"293,020\"\n\n\n\nlist(\n  icon = \"heart-fill\",\n  color = \"green\",\n  value = scales::comma(comments_vb_tbl$`비디오수`)\n)\n\n$icon\n[1] \"heart-fill\"\n\n$color\n[1] \"green\"\n\n$value\n[1] \"3,436\"\n\n\n\n\n\n\n\nlibrary(reactable)\n\ncomments_stat_tbl |&gt; \n  rename(사용자명 = authorDisplayName) |&gt; \n  reactable(\n      searchable = TRUE,\n      defaultColDef = colDef(\n        header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n        align = \"center\",\n        minWidth = 30,\n        headerStyle = list(background = \"#f7f7f8\")\n      ),\n      columns = list(\n        사용자명 = colDef(minWidth = 50),\n        동영상수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        좋아요수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        댓글수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        답글수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n      bordered = TRUE,\n      highlight = TRUE)    \n  )\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(umap)\nlibrary(parallel)\nlibrary(plotly)\n\ncomments_stat_samples &lt;- comments_stat_tbl |&gt; \n  slice_sample(n = 1000)\n\n# authorDisplayName을 제외한 나머지 변수 선택\nnumeric_data &lt;- comments_stat_samples %&gt;%\n  select(-authorDisplayName)\n\n# 스케일링\nscaled_data &lt;- scale(numeric_data)\n\numap_result &lt;- umap(scaled_data)\n\n# 차원 축소 결과와 authorDisplayName 결합\nresult &lt;- data.frame(umap_result$layout, \n                     authorDisplayName = comments_stat_samples$authorDisplayName)\n\n# ggplot 객체 생성\np &lt;- ggplot(result, aes(x = X1, y = X2, text = authorDisplayName)) +\n  geom_point(size = 1, alpha = 0.7) +\n  theme_minimal() +\n  labs(x = \"차원 1\", y = \"차원 2\", title = \"유튜브 댓글러 군집 시각화\")\n\n# ggplotly를 사용하여 인터랙티브 시각화 생성\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "comments_stat.html#row",
    "href": "comments_stat.html#row",
    "title": "댓글 사용자",
    "section": "",
    "text": "list(\n  icon = \"hospital\",\n  color = \"yellow\",\n  value = scales::comma(comments_vb_tbl$`댓글 사용자수`)\n)\n\n$icon\n[1] \"hospital\"\n\n$color\n[1] \"yellow\"\n\n$value\n[1] \"292,828\"\n\n\n\nlist(\n  icon = \"moon-fill\",\n  color = \"danger\",\n  value = scales::comma(comments_vb_tbl$`댓글수`)\n)\n\n$icon\n[1] \"moon-fill\"\n\n$color\n[1] \"danger\"\n\n$value\n[1] \"293,020\"\n\n\n\nlist(\n  icon = \"heart-fill\",\n  color = \"green\",\n  value = scales::comma(comments_vb_tbl$`비디오수`)\n)\n\n$icon\n[1] \"heart-fill\"\n\n$color\n[1] \"green\"\n\n$value\n[1] \"3,436\""
  },
  {
    "objectID": "comments_stat.html#column",
    "href": "comments_stat.html#column",
    "title": "댓글 사용자",
    "section": "",
    "text": "library(reactable)\n\ncomments_stat_tbl |&gt; \n  rename(사용자명 = authorDisplayName) |&gt; \n  reactable(\n      searchable = TRUE,\n      defaultColDef = colDef(\n        header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n        align = \"center\",\n        minWidth = 30,\n        headerStyle = list(background = \"#f7f7f8\")\n      ),\n      columns = list(\n        사용자명 = colDef(minWidth = 50),\n        동영상수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        좋아요수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        댓글수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        답글수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n      bordered = TRUE,\n      highlight = TRUE)    \n  )\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(umap)\nlibrary(parallel)\nlibrary(plotly)\n\ncomments_stat_samples &lt;- comments_stat_tbl |&gt; \n  slice_sample(n = 1000)\n\n# authorDisplayName을 제외한 나머지 변수 선택\nnumeric_data &lt;- comments_stat_samples %&gt;%\n  select(-authorDisplayName)\n\n# 스케일링\nscaled_data &lt;- scale(numeric_data)\n\numap_result &lt;- umap(scaled_data)\n\n# 차원 축소 결과와 authorDisplayName 결합\nresult &lt;- data.frame(umap_result$layout, \n                     authorDisplayName = comments_stat_samples$authorDisplayName)\n\n# ggplot 객체 생성\np &lt;- ggplot(result, aes(x = X1, y = X2, text = authorDisplayName)) +\n  geom_point(size = 1, alpha = 0.7) +\n  theme_minimal() +\n  labs(x = \"차원 1\", y = \"차원 2\", title = \"유튜브 댓글러 군집 시각화\")\n\n# ggplotly를 사용하여 인터랙티브 시각화 생성\nggplotly(p, tooltip = \"text\")"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "channel.html",
    "href": "channel.html",
    "title": "채널",
    "section": "",
    "text": "library(readr)\n\n# minju_channel_stat &lt;-   readr::read_csv(str_glue(\"data/minju_channel_stat_{str_remove_all(Sys.Date(), '-')}.csv\"))\n\nminju_channel_stat &lt;- readr::read_csv(\"data/minju_channel_stat_20240530.csv\")\n\nRows: 1 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (3): 조회수, 구독자수, 비디오수\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nlist(\n  icon = \"hospital\",\n  color = \"yellow\",\n  value = scales::comma(minju_channel_stat$`구독자수`)\n)\n\n$icon\n[1] \"hospital\"\n\n$color\n[1] \"yellow\"\n\n$value\n[1] \"268,000\"\n\n\n\nlist(\n  icon = \"moon-fill\",\n  color = \"danger\",\n  value = scales::comma(minju_channel_stat$`조회수`)\n)\n\n$icon\n[1] \"moon-fill\"\n\n$color\n[1] \"danger\"\n\n$value\n[1] \"76,421,846\"\n\n\n\nlist(\n  icon = \"heart-fill\",\n  color = \"green\",\n  value = scales::comma(minju_channel_stat$`비디오수`)\n)\n\n$icon\n[1] \"heart-fill\"\n\n$color\n[1] \"green\"\n\n$value\n[1] \"4,543\"\n\n\n\n\n\n\n\nlibrary(reactable)\n\n# minju_videos_stats_tbl &lt;- \n# readr::read_csv(str_glue(\"data/minju_videos_stats_{str_remove_all(Sys.Date(), '-')}.csv\"))\n\nminju_videos_stats_tbl &lt;- readr::read_csv(\"data/minju_videos_stats_20240530.csv\")\n\nRows: 4544 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): id, title, description, channel_id, channel_title, url\ndbl  (4): viewCount, likeCount, favoriteCount, commentCount\ndttm (1): publication_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nminju_videos_stats_tbl |&gt; \n  arrange(desc(publication_date)) |&gt; \n  mutate(게시일 = floor_date(publication_date, unit = \"day\") |&gt; as.Date()) |&gt; \n  select(vidoe_id = id, 명칭=title, 게시일, 조회수=viewCount, 좋아요수=likeCount, 댓글수=commentCount) |&gt; \n  reactable(\n      searchable = TRUE,\n      defaultColDef = colDef(\n        header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n        align = \"center\",\n        minWidth = 30,\n        headerStyle = list(background = \"#f7f7f8\")\n      ),\n      columns = list(\n        명칭 = colDef(minWidth = 80),\n        게시일 = colDef(show = TRUE),\n        조회수   = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        좋아요수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        댓글수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        vidoe_id = colDef(html = TRUE, cell = JS(\"\n          function(cellInfo) {\n            // Render as a link\n            return '&lt;a href=https://www.youtube.com//watch?v=' + cellInfo.value + '/&gt;' + cellInfo.value + '&lt;/a&gt;'\n          }\"))\n      ),\n      bordered = TRUE,\n      highlight = TRUE    \n  )\n\n\n\n\n\n\n\n\nyt_g &lt;- minju_videos_stats_tbl |&gt; \n  select(title, publication_date, 조회수=viewCount, 좋아요수=likeCount, 댓글수=commentCount) |&gt; \n  pivot_longer(cols = c(조회수, 좋아요수, 댓글수), names_to = \"key\", values_to = \"value\") |&gt; \n  mutate(key = factor(key, levels = c(\"조회수\", \"좋아요수\", \"댓글수\"))) |&gt; \n  ggplot(aes(x = publication_date, y = value, group = key, color = key,\n             text = str_glue(\"{title}&lt;br&gt;{floor_date(publication_date, unit = 'day')}\"))) +\n    geom_line(size = 0.3) +\n    geom_point(size = 0.5) +\n    facet_grid(rows = vars(key), scales = \"free_y\") +\n    theme(legend.position = \"none\") +\n    labs(title = \"유튜브 비디오 활동성 지표\", x = \"게시일\", y = \"\") +\n    scale_y_sqrt(labels = scales::comma) \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nplotly::ggplotly(yt_g, tooltip = \"text\")"
  },
  {
    "objectID": "channel.html#row",
    "href": "channel.html#row",
    "title": "채널",
    "section": "",
    "text": "list(\n  icon = \"hospital\",\n  color = \"yellow\",\n  value = scales::comma(minju_channel_stat$`구독자수`)\n)\n\n$icon\n[1] \"hospital\"\n\n$color\n[1] \"yellow\"\n\n$value\n[1] \"268,000\"\n\n\n\nlist(\n  icon = \"moon-fill\",\n  color = \"danger\",\n  value = scales::comma(minju_channel_stat$`조회수`)\n)\n\n$icon\n[1] \"moon-fill\"\n\n$color\n[1] \"danger\"\n\n$value\n[1] \"76,421,846\"\n\n\n\nlist(\n  icon = \"heart-fill\",\n  color = \"green\",\n  value = scales::comma(minju_channel_stat$`비디오수`)\n)\n\n$icon\n[1] \"heart-fill\"\n\n$color\n[1] \"green\"\n\n$value\n[1] \"4,543\""
  },
  {
    "objectID": "channel.html#column",
    "href": "channel.html#column",
    "title": "채널",
    "section": "",
    "text": "library(reactable)\n\n# minju_videos_stats_tbl &lt;- \n# readr::read_csv(str_glue(\"data/minju_videos_stats_{str_remove_all(Sys.Date(), '-')}.csv\"))\n\nminju_videos_stats_tbl &lt;- readr::read_csv(\"data/minju_videos_stats_20240530.csv\")\n\nRows: 4544 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): id, title, description, channel_id, channel_title, url\ndbl  (4): viewCount, likeCount, favoriteCount, commentCount\ndttm (1): publication_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nminju_videos_stats_tbl |&gt; \n  arrange(desc(publication_date)) |&gt; \n  mutate(게시일 = floor_date(publication_date, unit = \"day\") |&gt; as.Date()) |&gt; \n  select(vidoe_id = id, 명칭=title, 게시일, 조회수=viewCount, 좋아요수=likeCount, 댓글수=commentCount) |&gt; \n  reactable(\n      searchable = TRUE,\n      defaultColDef = colDef(\n        header = function(value) gsub(\".\", \" \", value, fixed = TRUE),\n        align = \"center\",\n        minWidth = 30,\n        headerStyle = list(background = \"#f7f7f8\")\n      ),\n      columns = list(\n        명칭 = colDef(minWidth = 80),\n        게시일 = colDef(show = TRUE),\n        조회수   = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        좋아요수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        댓글수 = colDef(format = colFormat(separators = TRUE,  digits = 0)),\n        vidoe_id = colDef(html = TRUE, cell = JS(\"\n          function(cellInfo) {\n            // Render as a link\n            return '&lt;a href=https://www.youtube.com//watch?v=' + cellInfo.value + '/&gt;' + cellInfo.value + '&lt;/a&gt;'\n          }\"))\n      ),\n      bordered = TRUE,\n      highlight = TRUE    \n  )\n\n\n\n\n\n\n\n\nyt_g &lt;- minju_videos_stats_tbl |&gt; \n  select(title, publication_date, 조회수=viewCount, 좋아요수=likeCount, 댓글수=commentCount) |&gt; \n  pivot_longer(cols = c(조회수, 좋아요수, 댓글수), names_to = \"key\", values_to = \"value\") |&gt; \n  mutate(key = factor(key, levels = c(\"조회수\", \"좋아요수\", \"댓글수\"))) |&gt; \n  ggplot(aes(x = publication_date, y = value, group = key, color = key,\n             text = str_glue(\"{title}&lt;br&gt;{floor_date(publication_date, unit = 'day')}\"))) +\n    geom_line(size = 0.3) +\n    geom_point(size = 0.5) +\n    facet_grid(rows = vars(key), scales = \"free_y\") +\n    theme(legend.position = \"none\") +\n    labs(title = \"유튜브 비디오 활동성 지표\", x = \"게시일\", y = \"\") +\n    scale_y_sqrt(labels = scales::comma) \n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nplotly::ggplotly(yt_g, tooltip = \"text\")"
  },
  {
    "objectID": "document.html",
    "href": "document.html",
    "title": "델리민주 유튜브 대시보드 문서",
    "section": "",
    "text": "민주당 유튜브 채널: 델리민주 Daily Minjoo\n\n채널 ID: UCoQD2xsqwzJA93PTIYERokg\n\n\n\n\n\nlibrary(tuber)\n\nfile.remove(\".httr-oauth\")\n\nyt_oauth(app_id = Sys.getenv(\"YT_CLIENT_ID\"), \n         app_secret = Sys.getenv(\"YT_CLIENT_SECRET\"),\n         token = \".httr-oauth\")\n\n\n\n\n\n# tuber 패키지 로드\nlibrary(tuber)\n\nminju_channel_id &lt;- \"UCoQD2xsqwzJA93PTIYERokg\"\n\n# 인증된 사용자의 채널 정보 가져오기\nchannel_info &lt;- get_channel_stats(minju_channel_id)\n\n# listviewer::jsonedit(channel_info)\n\nminju_channel_stat &lt;- tibble(\"조회수\" = channel_info$statistics$viewCount,\n       \"구독자수\" = channel_info$statistics$subscriberCount,\n       \"비디오수\" = channel_info$statistics$videoCount)\n\nfs::dir_create(\"data\")\n\nminju_channel_stat |&gt; \n  write_csv(str_glue(\"data/minju_channel_stat_{str_remove_all(Sys.Date(), '-')}.csv\"))"
  },
  {
    "objectID": "document.html#유튜브-api-인증",
    "href": "document.html#유튜브-api-인증",
    "title": "델리민주 유튜브 대시보드 문서",
    "section": "",
    "text": "library(tuber)\n\nfile.remove(\".httr-oauth\")\n\nyt_oauth(app_id = Sys.getenv(\"YT_CLIENT_ID\"), \n         app_secret = Sys.getenv(\"YT_CLIENT_SECRET\"),\n         token = \".httr-oauth\")"
  },
  {
    "objectID": "document.html#데이터-가져오기",
    "href": "document.html#데이터-가져오기",
    "title": "델리민주 유튜브 대시보드 문서",
    "section": "",
    "text": "# tuber 패키지 로드\nlibrary(tuber)\n\nminju_channel_id &lt;- \"UCoQD2xsqwzJA93PTIYERokg\"\n\n# 인증된 사용자의 채널 정보 가져오기\nchannel_info &lt;- get_channel_stats(minju_channel_id)\n\n# listviewer::jsonedit(channel_info)\n\nminju_channel_stat &lt;- tibble(\"조회수\" = channel_info$statistics$viewCount,\n       \"구독자수\" = channel_info$statistics$subscriberCount,\n       \"비디오수\" = channel_info$statistics$videoCount)\n\nfs::dir_create(\"data\")\n\nminju_channel_stat |&gt; \n  write_csv(str_glue(\"data/minju_channel_stat_{str_remove_all(Sys.Date(), '-')}.csv\"))"
  },
  {
    "objectID": "document.html#감성분석",
    "href": "document.html#감성분석",
    "title": "델리민주 유튜브 대시보드 문서",
    "section": "감성분석",
    "text": "감성분석\n\nlibrary(reticulate)\nuse_virtualenv(\"gpt-ds\", required = TRUE)\nvirtualenv_install(\"d:/envs/gpt-ds\", c(\"tf-keras\"))\n\n\nfrom transformers import pipeline\nimport pandas as pd\n\n# 데이터 로드\ncomments_df = pd.read_csv(\"data/comments_raw_second.csv\")\n\n# 감성 분석 파이프라인 초기화\nclassifier = pipeline(\"text-classification\", model='nlptown/bert-base-multilingual-uncased-sentiment')\n\n# 감성 분석 함수 정의 (텍스트 자르기 포함)\ndef analyze_sentiment(text, idx):\n    print(f\"Processing row {idx}...\")\n    \n    # 최대 토큰 길이 설정\n    max_length = 512\n    \n    # 텍스트를 최대 길이에 맞게 자름\n    truncated_text = text[:max_length]\n    \n    try:\n        result = classifier(truncated_text)[0]\n        label = result['label']\n        score = result['score']\n    except Exception as e:\n        label = 'Error'\n        score = str(e)\n    \n    return label, score\n\n# textOriginal 칼럼에 대해 감성 분석 수행\nresults = []\nfor idx, text in enumerate(comments_df['textOriginal']):\n    sentiment, sentiment_score = analyze_sentiment(text, idx)\n    results.append((sentiment, sentiment_score))\n\n# 결과를 데이터프레임에 추가\ncomments_df['sentiment'] = [result[0] for result in results]\ncomments_df['sentiment_score'] = [result[1] for result in results]\n\n# 결과 확인\nprint(comments_df[['sentiment', 'sentiment_score']])\n\n# 결과를 CSV 파일로 저장\ncomments_df.to_csv(\"data/comments_with_sentiment_second.csv\", index=False)"
  },
  {
    "objectID": "document.html#병렬처리-모니터링",
    "href": "document.html#병렬처리-모니터링",
    "title": "델리민주 유튜브 대시보드 문서",
    "section": "병렬처리 모니터링",
    "text": "병렬처리 모니터링\n\nimport pandas as pd\nfrom transformers import pipeline\nfrom concurrent.futures import ThreadPoolExecutor\nimport os\nimport tqdm\n\n# 데이터 로드\ncomments_df = pd.read_csv(\"data/comments_raw_second.csv\")\n\n# NaN 값 제거\ncomments_df = comments_df.dropna(subset=['textOriginal'])\n\n# 감성 분석 파이프라인 초기화\nclassifier = pipeline(\"text-classification\", model='nlptown/bert-base-multilingual-uncased-sentiment')\n\n# 별점을 감성으로 변환하는 함수 정의\ndef star_to_sentiment(star_label):\n    if star_label in ['1 star', '2 stars']:\n        return 'Negative'\n    elif star_label == '3 stars':\n        return 'Neutral'\n    elif star_label in ['4 stars', '5 stars']:\n        return 'Positive'\n    else:\n        return 'Error'\n\n# 감성 분석 함수 정의 (텍스트 자르기 포함)\ndef analyze_sentiment(text, idx):\n    if not isinstance(text, str):\n        return 'Error', 0.0\n\n    # 최대 토큰 길이 설정\n    max_length = 512\n    truncated_text = text[:max_length]\n\n    try:\n        result = classifier(truncated_text)[0]\n        sentiment = star_to_sentiment(result['label'])\n        score = result['score']\n    except Exception as e:\n        sentiment = 'Error'\n        score = str(e)\n\n    return sentiment, score\n\n# 병렬 처리 함수\ndef process_batch(start_idx, end_idx):\n    batch_results = []\n    for idx in tqdm.tqdm(range(start_idx, end_idx)):\n        text = comments_df.iloc[idx]['textOriginal']\n        sentiment, sentiment_score = analyze_sentiment(text, idx)\n        batch_results.append((sentiment, sentiment_score))\n    return batch_results\n\n# 모든 가용 코어 사용\nnum_workers = os.cpu_count()\nbatch_size = len(comments_df) // num_workers\nfutures = []\n\nwith ThreadPoolExecutor(max_workers=num_workers) as executor:\n    for i in range(num_workers):\n        start_idx = i * batch_size\n        end_idx = (i + 1) * batch_size if i != num_workers - 1 else len(comments_df)\n        futures.append(executor.submit(process_batch, start_idx, end_idx))\n\n# 결과 병합\nresults = []\nfor future in futures:\n    results.extend(future.result())\n\n# 결과를 데이터프레임에 추가\ncomments_df['sentiment'] = [result[0] for result in results]\ncomments_df['sentiment_score'] = [result[1] for result in results]\n\n# 감성 분석 통계 계산\nsentiment_counts = comments_df['sentiment'].value_counts()\nsentiment_scores = comments_df.groupby('sentiment')['sentiment_score'].describe()\n\n# 결과 확인\nprint(comments_df[['sentiment', 'sentiment_score']])\nprint(\"\\nSentiment Counts:\\n\", sentiment_counts)\nprint(\"\\nSentiment Scores Statistics:\\n\", sentiment_scores)\n\n# 감성 분석 시각화\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 6))\n\n# 감성 유형 빈도수 막대 그래프\nplt.subplot(1, 2, 1)\nsentiment_counts.plot(kind='bar', color=['blue', 'green', 'red'])\nplt.title('Sentiment Counts')\nplt.xlabel('Sentiment')\nplt.ylabel('Frequency')\n\n# 감성 유형별 점수 분포 상자 그림\nplt.subplot(1, 2, 2)\ncomments_df.boxplot(column='sentiment_score', by='sentiment', grid=False)\nplt.title('Sentiment Score Distribution')\nplt.suptitle('')  # 상단 제목 제거\nplt.xlabel('Sentiment')\nplt.ylabel('Score')\n\n# 그래프 출력\nplt.tight_layout()\nplt.show()\n\n# 결과를 CSV 파일로 저장\ncomments_df.to_csv(\"data/comments_with_sentiment_second.csv\", index=False)"
  },
  {
    "objectID": "document.html#r-분석",
    "href": "document.html#r-분석",
    "title": "델리민주 유튜브 대시보드 문서",
    "section": "R 분석",
    "text": "R 분석\n\nlibrary(tidyverse)\n\ncomment_sentiment_first &lt;- read_csv(\"data/comments_with_sentiment.csv\")\ncomment_sentiment_second &lt;- read_csv(\"data/comments_with_sentiment_second.csv\")\n\ncomment_sentiment_raw &lt;- bind_rows(comment_sentiment_first, comment_sentiment_second)\n\ncomment_sentiment_stat &lt;- comment_sentiment_raw |&gt; \n  group_by(videoId) |&gt; \n  summarise(\n    긍정 = sum(sentiment == \"Positive\"),\n    부정 = sum(sentiment == \"Negative\"),\n    중립 = sum(sentiment == \"Neutral\")) |&gt; \n  mutate(\n    댓글수 = 긍정 + 부정 + 중립,\n    긍정비율 = 긍정 / 댓글수,\n    중립비율 = 긍정 / 댓글수,\n    부정비율 = 부정 / 댓글수) \n  \ncomment_sentiment_stat |&gt; \n  write_csv(\"data/comment_sentiment_stat.csv\")"
  }
]